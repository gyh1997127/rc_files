# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
---
env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  #  TERM: xterm-256color-italic
        TERM: xterm
        #        TERM: xterm-256color-italic

window:
  # Window dimensions in character columns and lines
  # (changes require restart)
  dimensions:
    columns: 100
    lines: 24

  # Adds this many blank pixels of padding around the window
  # Units are physical pixels; this is not DPI aware.
  # (change requires restart)
  padding:
    x: 2
    y: 2

  # Values for `decorations`:
  # - full: Borders and title bar
  # - none: Neither borders nor title bar
  # - buttonless: Title bar, transparent background and title bar buttons
  # - transparent: Title bar, transparent background, but no title bar buttons
  decorations: none

# Display tabs using this many cells (changes require restart)
# NOTE: as of version v0.4.2 alacritty has removed the `tabspaces` configuration
# tabspaces: 8

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
font:
  # Point size of the font
  # size: 20
  # size: 18
  #  size: 15 # looks good on ext samsung monitor, but big for vnc window on macbook
  size: 12
  # size: 14 # not hot dog
  # size: 15.5 # looks good on ext samsung monitor
  ##
  # to print the current font size, within the active terminal
  # https://github.com/ipatch/dotfiles/wiki/terminal-emulator-Notes#working-with-alacritty

  #normal:
    #family: "Source Code Pro"
    # Style can be specified to pick a specific face.
    #style: Regular

  # The bold font face
  #bold:
    #family: "Source Code Pro"
    # Style can be specified to pick a specific face.
    #style: Bold

  # The italic font face
  #italic:
    #family: "Source Code Pro"
    # Style can be specified to pick a specific face.
    #style: "Italic"

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  # use_thin_strokes: true
  

# Should display the render timer
# NOTE: `render_timer` is deprecated
debug.render_timer: false

# Use custom cursor colors. If true, display the cursor in the cursor.foreground
# and cursor.background colors, otherwise invert the colors of the cursor.
# custom_cursor_colors: true # Deprecated in v0.21

# Colors (Tomorrow Night Bright)
colors:
  # Default colors
  primary:
    background: '0x000000'
    foreground: '0xeaeaea'

  # Colors the cursor will use if `custom_cursor_colors` is true
  cursor:
    text: '0x000000'
    # https://www.w3schools.com/colors/colors_picker.asp `E62CBA`
    cursor: '0xE62CBA'
  # Normal colors
  normal:
    black:   '0x000000'
    red:     '0xd54e53'
    green:   '0xb9ca4a'
    yellow:  '0xe6c547'
    blue:    '0x7aa6da'
    magenta: '0xc397d8'
    cyan:    '0x70c0ba'
    white:   '0xffffff'

  # Bright colors
  bright:
    black:   '0x666666'
    red:     '0xff3334'
    green:   '0x9ec400'
    yellow:  '0xe7c547'
    blue:    '0x7aa6da'
    magenta: '0xb77ee0'
    cyan:    '0x54ced6'
    white:   '0xffffff'

  # Dim colors (Optional)
  dim:
    black:   '0x333333'
    red:     '0xf2777a'
    green:   '0x99cc99'
    yellow:  '0xffcc66'
    blue:    '0x6699cc'
    magenta: '0xcc99cc'
    cyan:    '0x66cccc'
    white:   '0xdddddd'


# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
# visual_bell: DEPRECATED ≥ v0.5.0
bell:
  animation: EaseOutExpo
  duration: 0

# Background opacity
# background_opacity: 1.0
  window.opacity: 1.0

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelectio
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # Faux Scrollback
  #
  # The `faux_scrollback_lines` setting controls the number
  # of lines the terminal should scroll when the alternate
  # screen buffer is active. This is used to allow mouse
  # scrolling for applications like `man`.
  #
  # To disable this completely, set `faux_scrollback_lines` to 0.
  # DEPRECATED: faux_scrollback_lines: 1
  faux_scrolling_lines: 1
  # hide pointer while typing in the terminal
  # hide_cursor_when_typing: true
  hide_when_typing: true

  hints:
  # `url:` DEPRECATED
  #url:
    # URL launcher
    #
    # use the below app to open a URL
    # This URL is always added to the command as the last parameter.
    #
    # NOTE: ipatch, `open` is specific to macos
    launcher: open

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

# dynamic_title: true # DEPRECATED ≥ v0.5.0
  window.dynamic_title: true

# Style of the cursor
#
# Values for 'cursor_style':
# - Block
# - Underline
# - Beam
# cursor_style: Block # Deprecated in v0.21
cursor.style: Block

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
# shell:
#   program: /bin/bash
#   args:
#     - --login

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
#-----------------
# Use `xxd -psd` to discover other chars hex values
#---------------
key_bindings:
  - { key: C,        mods: Command, action: Copy                         }
  - { key: V,        mods: Command, action: Paste                        }

  - { key: Key0,     mods: Command, action: ResetFontSize                }
  - { key: Equals,   mods: Command, action: IncreaseFontSize             }
  - { key: Minus,    mods: Command, action: DecreaseFontSize             }
  
